<?xml version="1.0" encoding="utf-8"?>
<mx:LegendItem xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:mx="library://ns.adobe.com/flex/mx"

			   paddingLeft="27"
			   click="legendItemClicked(event)">

	<!--
		This LegendItem adds a CheckBox on the left of the legend item.
		When the CheckBox is selected it fires a Event.CHANGE event which is
		handled by the CheckBoxLegend component.
		Clicking on the LegendItem (beside the CheckBox) also toggles the CheckBox.
	-->

	<fx:Metadata>
		[Event(name="change", type="flash.events.Event")]
	</fx:Metadata>

	<fx:Script>
        <![CDATA[
		import spark.components.CheckBox;

		private var _checkbox:CheckBox;

		public function get checkbox():CheckBox {
			if (_checkbox == null) {
				_checkbox = new CheckBox();
				//				_checkbox.setStyle("skinClass", FlatCheckBoxButtonSkin);
				_checkbox.buttonMode = true;
				_checkbox.scaleX = 0.8;
				_checkbox.scaleY = 0.8;
				// select the item by default
				_checkbox.selected = true;
				_checkbox.addEventListener(MouseEvent.CLICK, checkboxClicked);
				_checkbox.addEventListener(Event.CHANGE, checkboxChanged);
			}
			return _checkbox;
		}

		public function get selected():Boolean {
			return checkbox.selected;
		}

		public function set selected(value:Boolean):void {
			checkbox.selected = value;
		}

		public function setSelected(value:Boolean, fireEvent:Boolean = true):void {
			checkbox.selected = value;
			if (fireEvent) {
				dispatchEvent(new Event(Event.CHANGE));
			}
		}

		override protected function createChildren():void {
			super.createChildren();
			// add the checkbox last
			addChild(checkbox);
		}

		override protected function updateDisplayList(w:Number, h:Number):void {
			super.updateDisplayList(w, h);

			// align vertical center
			checkbox.y = 3;
			//			var cby:Number = Math.max(0, (h - checkbox.height) / 2);
			//			if (cby != checkbox.y) {
			//				checkbox.y = cby;
			//			}

			// fill in a transparent background so that the mouse events
			// work properly, otherwise there is a gap between the checkbox and the legend item
			var g:Graphics = graphics;
			g.clear();
			g.beginFill(0xffffff, 0);
			g.drawRect(0, 0, w, h);
			g.endFill();
		}

		private function legendItemClicked(event:MouseEvent):void {
			// doesn't fire a CHANGE event, so we'll do it manually
			checkbox.selected = !checkbox.selected;
			checkbox.dispatchEvent(new Event(Event.CHANGE));
		}

		private function checkboxClicked(event:MouseEvent):void {
			// don't propagate this event up to the parent LegendItem
			event.stopPropagation();
		}

		private function checkboxChanged(event:Event):void {
			dispatchEvent(event.clone());
		}
		]]>
    </fx:Script>

</mx:LegendItem>